-- creacion de la base de datos
DROP DATABASE IF EXISTS moviesdb;
CREATE DATABASE moviesdb;

-- usar
USE moviesdb;

-- crear la tabla de movies
CREATE TABLE movie (
id BINARY(16) PRIMARY KEY DEFAULT (UUID_TO_BIN(UUID())),
title VARCHAR(255) NOT NULL,
year INT NOT NULL,
director VARCHAR(255) NOT NULL,
duration INT NOT NULL,
poster TEXT,
rate DECIMAL(2, 1) UNSIGNED

);

-- crear la tabla de generos (categorias)
CREATE TABLE genre (
id INT AUTO_INCREMENT PRIMARY KEY,
descripcion VARCHAR(255) NOT NULL
);

CREATE TABLE movie_genres (
movie_id BINARY(16) REFERENCES movies(id),
genre_id INT REFERENCES genres(id),
PRIMARY KEY (movie_id, genre_id)
);

INSERT INTO genre (descripcion) VALUES
('Drama'),
('Action'),
('Crime'),
('Adventure'),
('Sci-Fi'),
('Romance');

INSERT INTO movie (id, title, year, director, duration, poster, rate) VALUES
(UUID_TO_BIN(UUID()), "Inception", 2010, "Christopher Nolan", 148, "https://m.media-amazon.com/images/I/91Rc8cAmnAL._AC_UF1000,1000_QL80_.jpg", 8.8),
(UUID_TO_BIN(UUID()), "The Shawshank Redemption", 1994, "Frank Darabont", 142, "https://i.ebayimg.com/images/g/4goAAOSwMyBe7hnQ/s-l1200.webp", 9.3),
(UUID_TO_BIN(UUID()), "The Dark Knight", 2008, "Christopher Nolan", 152, "https://i.ebayimg.com/images/g/yokAAOSw8w1YARbm/s-l1200.jpg", 9.0);

INSERT INTO movie_genres (movie_id, genre_id) VALUES
((SELECT id FROM movie WHERE title = 'Inception'), (SELECT id FROM genre WHERE descripcion = 'Sci-Fi')),
((SELECT id FROM movie WHERE title = 'Inception'), (SELECT id FROM genre WHERE descripcion = 'Action')),
((SELECT id FROM movie WHERE title = 'The Shawshank Redemption'), (SELECT id FROM genre WHERE descripcion = 'Drama')),
((SELECT id FROM movie WHERE title = 'The Dark Knight'), (SELECT id FROM genre WHERE descripcion = 'Action'));

SELECT BIN_TO_UUID(id) id, title, year, director, duration, poster, rate FROM movie;

-- SELECT BIN_TO_UUID(movie_id) id, genre_id FROM movie_genres;

-- SELECT 
--     BIN_TO_UUID(m.id) AS id, 
--     m.title, 
--     m.year, 
--     m.director, 
--     m.duration, 
--     m.poster, 
--     m.rate, 
--     GROUP_CONCAT(g.descripcion) AS genres
-- FROM 
--     movie m
-- LEFT JOIN 
--     movie_genres mg ON m.id = mg.movie_id
-- LEFT JOIN 
--     genre g ON mg.genre_id = g.id
-- GROUP BY 
--     m.id;
--     
-- DELETE FROM movie WHERE id = UUID_TO_BIN('a5015325-2757-11ef-95c2-c46516b8f44f');
